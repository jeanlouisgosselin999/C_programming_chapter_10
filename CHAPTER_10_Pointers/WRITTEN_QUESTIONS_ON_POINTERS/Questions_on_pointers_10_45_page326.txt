a) TWO POINTERS WHOSE OBJECTS ARE THE INTEGER VARIABLES i AND j:

int i, j;
int *pi = &i;
int *pj = &j;


b) A POINTER TO A FLOATING-POINT QUANTITY, AND A POINTER TO A DOUBLE-PRECISION QUANTITY:

float *p1;
double *p2;


c) A FUNCTION THAT ACCEPTS TWO INTEGER ARGUMENTS AND RETURNS A POINTER TO A LONG INTEGER:

long* p(int a, int b);


d) A FUNCTION THAT ACCEPTS 2 ARGUMENTS AND RETURNS A LONG INTEGER; EACH ARGUMENT WILL BE A POINTER TO AN INTEGER QUANTITY:

long* p(int *a, int *b);


e) A ONE-DIMENSIONAL FLOATING-POINT ARRAY USING POINTER NOTATION:

float *p1[10];


f) A 2-DIMENSIONAL FLOATING-POINT ARRAY, WITH 15 ROWS AND 30 COLUMNS, USING POINTER NOTATION:

float *x[30];


g) AN ARRAY OF STRINGS WHOSE INITIAL VALUES ARE "RED", GREEN" AND "BLUE"

char *p = {"red", "green", "blue"};


h) A FUNCTION THAT ACCEPTS ANOTHER FUNCTION AS AN ARGUMENT AND RETURNS A POINTER TO A CHARACTER; THE FUNCTION PASSED AS AN ARGUMENT 
WILL ACCEPT AN INTEGER ARGUMENT AND RETURN AN INTEGER QUANTITY:

char *func1 (int (*func2) (int a));


i) A POINTER TO A FUNCTION THAT ACCEPTS THREE INTEGER ARGUMENTS AND RETURNS A FLOATING-POINT QUANTITY:

float (*p)(int a, int b, int c);


j) A POINTER TO A FUNCTION THAT ACCEPTS THREE POINTERS TO INTEGER QUANTITIES AS ARGUMENTS AND RETURNS A POINTER TO A FLOATING-POINT QUNATITY:

float *(*p)(int *a, int *b, int *c);